import { supabase } from './supabase.js';

// üîß 1. –û—Ç—Ä–∏–º—É—î–º–æ Telegram ID
function getCurrentTgId() {
  if (typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
    return window.Telegram.WebApp.initDataUnsafe.user.id.toString();
  }
  return 'guest-' + Date.now();
}

// üîß 2. –û—Ç—Ä–∏–º—É—î–º–æ Telegram username
function getCurrentUsername() {
  if (typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user?.username) {
    return window.Telegram.WebApp.initDataUnsafe.user.username;
  }
  return 'Anonymous';
}

// ‚úÖ –ó—á–∏—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å whiskas —É –≥—Ä–∞–≤—Ü—è
export async function getWhiskas(tg_id = getCurrentTgId()) {
  const { data, error } = await supabase
    .from('players')
    .select('whiskas')
    .eq('tg_id', tg_id)
    .single();

  // üü¢ –Ø–∫—â–æ –≥—Ä–∞–≤—Ü—è —â–µ –Ω–µ–º–∞—î ‚Äî –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –∑ username
  if (error && error.code === 'PGRST116') {
    await supabase.from('players').insert({
      tg_id,
      username: getCurrentUsername(),
      whiskas: 0,
    });
    return 0;
  }

  return data?.whiskas ?? 0;
}

// ‚úÖ –î–æ–¥–∞—î–º–æ whiskas –ø—ñ—Å–ª—è –≥—Ä–∏
export async function updateWhiskas(addAmount) {
  const tg_id = getCurrentTgId();
  const current = await getWhiskas(tg_id); // —Ç—É—Ç –≤–∂–µ username –¥–æ–¥–∞—Å—Ç—å—Å—è, —è–∫—â–æ —Ç—Ä–µ–±–∞
  const newTotal = current + addAmount;

  await supabase
    .from('players')
    .update({ whiskas: newTotal })
    .eq('tg_id', tg_id);

  console.log('üü¢ updateWhiskas()', tg_id, addAmount);
  return newTotal;
}